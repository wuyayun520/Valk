name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products
          
      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app
        
      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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


          certificate-password: 111111
          
          provisioning-profile-base64: 

          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa


      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/valk.ipa"
          APPLE_ID: "winss504@outlook.com"
          APP_SPECIFIC_PASSWORD: "nvzv-fphu-dwen-islv"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
